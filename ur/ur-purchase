#!/usr/bin/env bash

# SPDX-License-Identifier: AGPL-3.0-or-later

#    ----------------------------------------------------------------------
#    Copyright Â© 2025  Pellegrino Prevete
#
#    All rights reserved
#    ----------------------------------------------------------------------
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="$( \
  realpath \
    "${_bin}/../lib")"
_crash_bash="${_lib}/libcrash-bash/crash-bash"
_libevm="${_lib}/libevm/libevm"
_sourced \
  "${_crash_bash}" 2>/dev/null || \
  source \
    "${_crash_bash}"
_sourced \
  "${_libevm}"

# shellcheck disable=SC2034
_global_variables() {
  purchase_date=""
  ur_address=""
  ur_version=""
  cache_dir=""
  target_publisher=""
  target_package=""
  target_revision=""
  target_recipient=""
  target_price=""
  auto_confirm=""
  measure_unit=""
  command_args=()
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    'libevm-requirements'
  libevm-requirements
  _check_cmd \
    'evm-contract-call' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-contract-deployment-networks' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-wallet'
}

_conf_dir_auto_detect() {
  local \
    _dir
  _dir="${HOME}/.config/ur/purchase"
  echo \
    "${_dir}"
}

_cache_dir_auto_detect() {
  local \
    _dir
  _dir="${HOME}/.cache/ur/purchase"
  echo \
    "${_dir}"
}

_contract_call_opts_setup() {
  _contract_call_opts+=(
    -n
      "${_target_network}"
    -k
      "${_api_key_path}"
    -A
      "${_abi}"
    -B
      "${_bytecode}"
    -C
      "${_compiler_output}"
  )
  if [[ "${_wallet_name}" != "" ]]; then
    _contract_call_opts+=(
      -N
        "${_wallet_name}"
    )
  fi
  if [[ "${_wallet_path}" != "" ]]; then
    _contract_call_opts+=(
      -w
        "${_wallet_path}"
    )
  fi
  if [[ "${_wallet_seed}" != "" ]]; then
    _contract_call_opts+=(
      -s
        "${_wallet_seed}"
    )
  fi
  if [[ "${_wallet_password}" != "" ]]; then
    _contract_call_opts+=(
      -p
        "${_wallet_password}"
    )
  fi
}

_recipe_purchase_call_opts_setup() {
  local \
    _contract_call_opts=()
  _contract_call_opts_setup
  if [[ "${quiet}" == "n" ]]; then
    _purchase_call_opts+=(
      -v
    )
  fi
  _data_call_opts+=(
    "${_contract_call_opts[@]}"
    -t
      "static"
  )
  _purchase_call_opts+=(
    "${_contract_call_opts[@]}"
    -t
      "dynamic"
  )
}

_work_dir_setup() {
  local \
    _msg=()
  _tmp_dir="${_cache_dir}"
  _msg=(
    "setting up work directory"
    "'${_tmp_dir}'."
  )
  _msg_info \
    "${_msg[*]}"
  chmod \
    -R \
    700 \
    "${_tmp_dir}"
}

_revision_latest_get() {
  local \
    _ur_address="${1}" \
    _publisher="${2}" \
    _pkg="${3}" \
    _msg=() \
    _revno
  _msg=(
    "Getting latest revision for"
    "package '${_pkg}' and publisher"
    "'${_publisher}'."
  )
  _msg_info \
    "${_msg[*]}"
  _revno="$( \
    evm-contract-call \
      "${_data_call_opts[@]}" \
      "${_ur_address}" \
      "revNo" \
      "${_pkg}" \
      "${_publisher}")"
  if [[ "${_revno}" == "0" ]]; then
    _msg=(
      "Publisher '${_publisher}'"
      "has published no '${_pkg}'"
      "package."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  elif (( 0 < "${_revno}" )); then
    _revision_latest="$(( \
      _revno - 1))"
    _msg=(
      "Latest revision for '${_pkg}'"
      "is '${_revision_latest}'."
    )
    _msg_info \
      "${_msg[*]}"
  else
    _msg=(
      "Error while retrieving"
      "revision for package '${_pkg}'"
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_revision_price_get() {
  local \
    _ur_address="${1}" \
    _publisher="${2}" \
    _pkg="${3}" \
    _revision="${4}" \
    _msg=()
  _msg=(
    "Getting price for revision '${_revision}'"
    "of package '${_pkg}' by publisher"
    "'${_publisher}'."
  )
  _msg_info \
    "${_msg[*]}"
  _price_revision="$( \
    evm-contract-call \
      "${_data_call_opts[@]}" \
      "${_ur_address}" \
      "price" \
      "${_pkg}" \
      "${_publisher}" \
      "${_revision}")"
}

_revision_validate() {
  local \
    _revision="${1}" \
    _revision_latest="${2}" \
    _msg=()
  if (( "${_revision}" < "${_revision_latest}" )); then
    _msg=(
      "Getting revision '${_revision}',"
      "while latest is '${_revision_latest}'."
    )
    _msg_warning \
      "${_msg[*]}"
  elif (( "${_revision}" > "${_revision_latest}" )); then
    _msg=(
      "Trying to get revision '${_revision}',"
      "while latest is '${_revision_latest}'."
    )
    _msg_error \
      "${_msg[*]}" \
      1
  fi
}

_revision_currency_get() {
  local \
    _ur_address="${1}" \
    _publisher="${2}" \
    _pkg="${3}" \
    _revision="${4}" \
    _msg=()
  _msg=(
    "Getting currency for revision '${_revision}'"
    "of package '${_pkg}' by publisher"
    "'${_publisher}'."
  )
  _msg_info \
    "${_msg[*]}"
  _revision_currency="$( \
    evm-contract-call \
      "${_data_call_opts[@]}" \
      "${_ur_address}" \
      "currency" \
      "${_pkg}" \
      "${_publisher}" \
      "${_revision}")"
}

_price_validate() {
  local \
    _price="${1}" \
    _price_revision="${2}" \
    _msg=()
  if (( "${_price}" < "${_price_revision}" )); then
    _msg=(
      "Trying to buy recipe for '${_price}',"
      "wei but its set price"
      "is '${_price_revision}' wei."
      "Raising price to '${_price_revision}' wei." 
    )
    _msg_warning \
      "${_msg[*]}"
    _price="${_price_revision}"
  elif (( "${_price}" > "${_price_revision}" )); then
    _msg=(
      "Trying to buy recipe for for '${_price}'"
      "wei, while its set price"
      "is '${_price_revision}' wei."
    )
    _msg_warning \
      "${_msg[*]}"
  fi
}

_recipe_purchase() {
  local \
    _target_network="${1}" \
    _ur_address="${2}" \
    _abi="${3}" \
    _bytecode="${4}" \
    _compiler_output="${5}" \
    _work_dir="${6}" \
    _pkg="${7}" \
    _publisher="${8}" \
    _revision="${9}" \
    _recipient="${10}" \
    _price="${11}" \
    _measure_unit="${12}" \
    _auto_confirm="${13}" \
    _msg=() \
    _data_call_opts=() \
    _purchase_call_opts=() \
    _revision_latest \
    _price_revision \
    _revision_currency \
    _purchase \
    _purchased \
    _address_null \
    _amount
  _address_null="0x0000000000000000000000000000000000000000"
  _recipe_purchase_call_opts_setup
  _msg=(
    "Purchasing revision '${_revision}'"
    "of package '${_pkg}'"
    "from publisher '${_publisher}'"
    "for '${_price}' ${_measure_unit}."
  )
  _msg_info \
    "${_msg[*]}"
  _revision_latest_get \
    "${_ur_address}" \
    "${_publisher}" \
    "${_pkg}"
  if [[ "${_revision}" == "latest" || \
        "${_revision}" == "" ]]; then
    _revision="${_revision_latest}"
  fi
  _revision_validate \
    "${_revision}" \
    "${_revision_latest}"
  _purchased="$( \
    evm-contract-call \
      "${_data_call_opts[@]}" \
      "${_ur_address}" \
      "purchased" \
      "${_pkg}" \
      "${_publisher}" \
      "${_revision}" \
      "${_recipient}")"
  if [[ "${_purchased}" == "true" ]]; then
    _msg=(
      "User '${_recipient}' has already"
      "purchased revision '${_revision}'"
      "of package '${_pkg}'."
    )
    _msg_error \
      "${_msg[*]}" \
      0
    return
  elif [[ "${_purchased}" == "false" ]]; then
    if [[ "${_measure_unit}" == "ether" ]]; then
      _price="$( \
        _ether_to_wei \
          "${_price}")"
    fi
    _revision_price_get \
      "${_ur_address}" \
      "${_publisher}" \
      "${_pkg}" \
      "${_revision}"
    if (( 0 < "${_price}" )); then
      _msg=(
        "Non-negative price, discovering"
        "purchase currency."
      )
      _msg_info \
        "${_msg[*]}"
      _revision_currency_get \
        "${_ur_address}" \
        "${_publisher}" \
        "${_pkg}" \
        "${_revision}"
    fi
    _price_validate \
      "${_price}" \
      "${_price_revision}"
    if [[ "${_revision_currency}" == "${_address_null}" ]]; then
      _msg=(
        "Purchase currency is network's gas."
      )
      _msg_info \
        "${_msg[*]}"
      _purchase_call_opts+=(
        -V
          "${_price}"
        -u
          "wei"
      )
      _amount="0"
    elif [[ "${_revision_currency}" != "${_address_null}" ]]; then
      _msg=(
        "Purchase currency is '${_revision_currency}'."
      )
      _msg_info \
        "${_msg[*]}"
      _amount="${_price}"
    fi
    if [[ "${_auto_confirm}" == "y" ]]; then
      _purchase="y"
    elif [[ "${_auto_confirm}" == "n" ]]; then
      _msg=(
        "Purchase revision '${_revision}'"
        "of package '${_pkg}' by"
        "publisher '${_publisher}'"
        "at price '${_price}' wei"
        "in currency '${_revision_currency}'? [y/N] "
      )
      read \
        -p \
          "${_msg[*]}" \
        _purchase
      _purchase="$( \
        _lower \
          "${_purchase}")"
    fi
    if [[ "${_purchase}" == "y" ]]; then
      if (( 0 < "${_revision_price}" )); then
        if [[ "${_revision_currency}" != "${_address_null}" ]]; then
          _msg=(
            "Allowing the Ur to transfer from user"
            "the funds to purchase package '${_pkg}'."
          )
          _msg_info \
            "${_msg[*]}"
          evm-contract-call \
            "${_purchase_call_opts[@]}" \
            "${_ur_address}" \
            "approvePurchaseRecipe" \
            "${_pkg}" \
            "${_publisher}" \
            "${_revision}" \
            "${_recipient}"
          _msg=(
            "Permission to transfer from user"
            "the funds to purchase package '${_pkg}'"
            "approved."
          )
          _msg_info \
            "${_msg[*]}"
        fi
      fi
      evm-contract-call \
        "${_purchase_call_opts[@]}" \
        "${_ur_address}" \
        "purchaseRecipe" \
        "${_pkg}" \
        "${_publisher}" \
        "${_revision}" \
        "${_recipient}" \
        "${_amount}"
      echo \
        "Revision correctly purchased."
    else
      echo \
        "Transaction not confirmed, exit."
    fi
  fi
}

_ur_purchase() {
  local \
    _ur_address="${1}" \
    _ur_version="${2}" \
    _deployments_dir="${3}" \
    _wallet_name="${4}" \
    _wallet_path="${5}" \
    _wallet_password="${6}" \
    _wallet_seed="${7}" \
    _target_network="${8}" \
    _api_key_path="${9}" \
    _cache_dir="${10}" \
    _target_recipient="${11}" \
    _target_package="${12}" \
    _target_publisher="${13}" \
    _target_revision="${14}" \
    _target_price="${15}" \
    _measure_unit="${16}" \
    _auto_confirm="${17}" \
    _command_args=() \
    _cmd \
    _args=() \
    _msg=() \
    _wallet_address \
    _ur_abi \
    _ur_bytecode \
    _ur_compiler_output
  shift \
    17
  _command_args+=(
    "$@"
  )
  _wallet_address="$( \
    evm-wallet \
     get \
       "${_wallet_name}" \
       "address")"
  _ur_abi="$( \
    _contract_abi_get \
      "${_deployments_dir}" \
      "${_target_network}" \
      "UserRepository" \
      "${_ur_version}")"
  _ur_bytecode="$( \
    _contract_bytecode_get \
      "${_deployments_dir}" \
      "${_target_network}" \
      "UserRepository" \
      "${_ur_version}")"
  _ur_compiler_output="$( \
    _contract_compiler_output_get \
      "${_deployments_dir}" \
      "${_target_network}" \
      "UserRepository" \
      "${_ur_version}")"
  if [[ "${_target_recipient}" == "" ]]; then
    _msg=(
      "No target address specified,"
      "purchasing recipe for own"
      "address '${_wallet_address}'."
    )
    _msg_warning \
      "${_msg[*]}"
    _target_recipient="${_wallet_address}"
  fi
  if [[ "${_target_recipient}" != \
        "${_wallet_address}" ]]; then
    _msg=(
      "Purchasing recipe for owner"
      "of address '${_target_recipient}',"
      "not for self."
    )
    _msg_warning \
      "${_msg[*]}"
  fi
  _recipe_purchase \
      "${_target_network}" \
      "${_ur_address}" \
      "${_ur_abi}" \
      "${_ur_bytecode}" \
      "${_ur_compiler_output}" \
      "${_cache_dir}" \
      "${_target_package}" \
      "${_target_publisher}" \
      "${_target_revision}" \
      "${_target_recipient}" \
      "${_target_price}" \
      "${_measure_unit}" \
      "${_auto_confirm}"
}

_target_publisher_auto_detect() {
  local \
    _publisher \
    _wallet_address \
    _msg=()
  _wallet_address="${wallet_address}"
  _publisher="${target_publisher}"
  if [[ "${_publisher}" == "" ]]; then
    # TODO: retrieve available publishers
    #       for a given package.
    _msg=(
      "Target publisher not specified,"
      "purchasing own package recipe"
      "if published."
    )
    _msg_warning \
      "${_msg[*]}"
    _publisher="${_wallet_address}"
  fi
  _set_override \
    "target" \
    "publisher" \
    "${_publisher}"
}

_target_recipient_auto_detect() {
  local \
    _recipient \
    _wallet_address \
    _msg=()
  _wallet_address="${wallet_address}"
  _recipient="${target_recipient}"
  if [[ "${_recipient}" == "" ]]; then
    _msg=(
      "Target recipient not specified,"
      "purchasing package for self."
    )
    _msg_info \
      "${_msg[*]}"
    _recipient="${_wallet_address}"
  fi
  _set_override \
    "target" \
    "recipient" \
    "${_recipient}"
}

_ether_to_wei() {
  local \
    _ether="${1}" \
    _unit
  _scale=1000000000000000000
  echo \
    "$((_ether * _scale))"
}

_target_price_auto_detect() {
  local \
    _measure_unit \
    _price
  _measure_unit="${measure_unit}"
  if [[ "${_measure_unit}" == "ether" ]]; then
    _price="1"
  elif [[ "${_measure_unit}" == "wei" ]]; then
    _price="$( \
      _ether_to_wei \
        1)"
  fi
  _set_override \
    "target" \
    "price" \
    "${_price}"
}

_set_overrides() {
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  _set_override \
    "purchase" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "user" \
    "level" \
    "n"
  _set_override \
    "wallet" \
    "name" \
    "default"
  _deployments_dir_auto_detect \
    "ur" \
    "${user_level}"
  _network_auto_detect \
    "UserRepository" \
    "${deployments_dir}" \
    "${user_level}"
  _api_key_auto_detect \
    "${target_network}"
  _wallet_overrides_set \
    "evm-wallet" \
    "${wallet_name}" \
    "y"
  _set_override \
    "cache" \
    "dir" \
    "$(_cache_dir_auto_detect)"
  _contract_setup_auto_detect \
    "ur" \
    "UserRepository" \
    "ur" \
    "${target_network}" \
    "${user_level}" \
    "${deployments_dir}"
  _set_override \
    "auto" \
    "confirm" \
    "n"
  _target_publisher_auto_detect
  _target_recipient_auto_detect
  _set_override \
    "target" \
    "revision" \
    "latest"
  _set_override \
    "measure" \
    "unit" \
    "ether"
  _target_price_auto_detect
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _ur \
    _ur_deployment \
    _networks=() \
    _usage_text
  _ur="UserRepository"
  _ur_deployment="${deployments_dir}/${_ur}"
  _networks+=( $( \
    evm-contract-deployment-networks \
      -A \
      "${_ur_deployment}")
  )
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Purchase Ur packages.

Usage:
  ${app_name}
    [options]
    <package>
    <publisher>
    <revision>

  networks:
$(_display_networks \
     "${_networks[@]}")

  options:
     -r <recipient>         Address of the user for which the package
                            recipe is being purchased.
                            Default: ${target_recipient}
     -P <price>             Manually specify an amount to purchase
                            the recipe for.
                            Default: ${target_price}
     -m <measure_unit>      Unit of measure for the network
                            purchasing currency.
                            It can be 'ether' or 'wei'.
                            Default: ${measure_unit}
     -y                     If enabled do not ask for confirmation
                            before purchase.
                            Default: ${auto_confirm}

  contract options:
     -A <ur_address>        Address of the 'User Repository'
                            contract on the
                            network.
                            Default: ${ur_address}
     -V <ur_version>        Version of the target 'User Repository'
                            contract.
                            Default: ${ur_version}

  libevm options:
     -u                     Whether to retrieve publishers' contract
                            address from user directory or custom
                            deployment.
                            Default: ${user_level}
     -d <deployments_dir>   Contracts deployments directory.
                            Default: ${deployments_dir}

  credentials options:
     -N <wallet_name>       Wallet name.
                            Default: ${wallet_name}
     -w <wallet_path>       Wallet path.
                            Default: ${wallet_path}
     -p <wallet_password>   Wallet password.
                            Default: ${wallet_password}
     -s <wallet_seed>       Wallet seed path.
                            Default: ${wallet_seed}
     -n <network>           EVM network name (${_networks[*]}).
                            Default: ${target_network}
     -k <api_key>           Etherscan-like service key.
                            Default: ${api_key}

  app options:
     -W <cache_dir>         Work directory.
                            Default: ${cache_dir}

     -h                     This message.
     -c                     Enable color output
     -v                     Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flag \
    _flags=(
      "${1}"
    )
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "            Purchase date:   ${purchase_date}"
  _msg_info "  User Repository address:   ${ur_address}"
  _msg_info "  User Repository version:   ${ur_version}"
  _msg_info "               User level:   ${user_level}"
  _msg_info "    Deployments directory:   ${deployments_dir}"
  _msg_info "           Wallet address:   ${wallet_address}"
  _msg_info "              Wallet name:   ${wallet_name}"
  _msg_info "              Wallet path:   ${wallet_path}"
  _msg_info "          Wallet password:   ${wallet_password}"
  _msg_info "              Wallet seed:   ${wallet_seed}"
  _msg_info "           Target network:   ${target_network}"
  _msg_info "                  API key:   ${api_key}"
  _msg_info "           Target package:   ${target_package}"
  _msg_info "         Target publisher:   ${target_publisher}"
  _msg_info "          Target revision:   ${target_revision}"
  _msg_info "         Target recipient:   ${target_recipient}"
  _msg_info "             Target price:   ${target_price}"
  _msg_info "             Measure unit:   ${measure_unit}"
  _msg_info "             Auto confirm:   ${auto_confirm}"
  _msg_info "          Cache directory:   ${cache_dir}"
}

_globals
_global_variables
_requirements
_libevm_global_variables
_libevm_app_global_variables
# shellcheck disable=SC2034
getopts_opts="$( \
  printf \
    "%s" \
    "r:P:m:yG:" \
    "A:V:" \
    "$(_libevm_app_getopts_params_get)" \
    "n:" \
    "$(_wallet_getopts_params_get)" \
    "W:cvh")"
while \
  getopts \
    "${getopts_opts}" \
    arg; do
  _wallet_getopts_case
  _libevm_app_getopts_case
  case \
    "${arg}" in
    r) \
      override_target_recipient="${OPTARG}" ;;
    P) \
      override_target_price="${OPTARG}" ;;
    m) \
      override_measure_unit="${OPTARG}" ;;
    y) \
      override_auto_confirm="y" ;;
    A) \
      override_ur_address="${OPTARG}" ;;
    V) \
      override_ur_version="${OPTARG}" ;;
    n) \
      override_target_network="${OPTARG}" ;;
    W) \
      override_cache_dir="${OPTARG}" ;;
    c) \
      override_color="y" ;;
    v) \
      override_quiet="n" ;;
    h) \
      _set_overrides && \
      _usage \
        0 ;;
    *) \
      if [[ " ${getopts_opts} " != *"${arg}"* ]]; then
        _msg_error \
          "Invalid argument '${arg}'." \
          0
        _usage \
          1
      fi ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
if (( $# < 1 )); then
  _msg_error \
    "No package given." \
    0
  _set_overrides
  _usage \
    1
fi
if (( 0 < $# )); then
  target_package="${1}"
fi
if (( 1 < $# )); then
  target_publisher="${2}"
fi
if (( 2 < $# )); then
  target_revision="${3}"
fi
shift \
  3 || \
  true
command_args+=(
  "$@"
)
_set_overrides
_show_config
app_opts=(
  "${ur_address}"
  "${ur_version}"
  "${deployments_dir}"
  "${wallet_name}"
  "${wallet_path}"
  "${wallet_password}"
  "${wallet_seed}"
  "${target_network}"
  "${api_key}"
  "${cache_dir}"
  "${target_recipient}"
  "${target_package}"
  "${target_publisher}"
  "${target_revision}"
  "${target_price}"
  "${measure_unit}"
  "${auto_confirm}"
)
_ur_purchase \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
