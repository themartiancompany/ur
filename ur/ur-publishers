#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0-or-later

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
source \
  "${_lib}/libcrash-bash/crash-bash"
source \
  "${_lib}/libevm/libevm"

# shellcheck disable=SC2034
_global_variables() {
  call_date=""
  up_address=""
  up_version=""
  deployments_dir=""
  user_level=""
  wallet_name=""
  wallet_path=""
  wallet_password=""
  wallet_seed=""
  wallet_address=""
  target_network=""
  api_key=""
  cache_dir=""
  gnupg_home=""
  target_command=""
  target_key=""
  target_value=""
  command_args=()
  color=""
  quiet=""
}

_requirements() {
  _check_cmd \
    'libevm-requirements'
  libevm-requirements
  _check_cmd \
    'evm-contract-call' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-contract-deployment-networks' \
    'evm-contracts-tools'
  _check_cmd \
    'evm-wallet'
  _check_cmd \
    'gpg-key-info'
}

_get_conf_dir_path() {
  local \
    _dir
  _dir="${HOME}/.config/ur/publishers"
  echo \
    "${_dir}"
}

_cache_dir_auto_detect() {
  local \
    _dir
  _dir="${HOME}/.cache/ur/publishers"
  echo \
    "${_dir}"
}

_chunk_lock() {
  local \
    _contract="${1}" \
    _namespace="${2}" \
    _sum="${3}" \
    _index="${4}"
  evm-contract-call \
    "${_lock_call_opts[@]}" \
    "${_ur_address}" \
    "lockChunk" \
    "${_namespace}" \
    "${_sum}" \
    "${_index}"
}

_chunk_publish() {
  local \
    _fs_address="${1}" \
    _namespace="${2}" \
    _sum="${3}" \
    _index="${4}" \
    _payload="${5}"
  evm-contract-call \
    "${_publish_call_opts[@]}" \
    "${_fs_address}" \
    "publishChunk" \
    "${_namespace}" \
    "${_sum}" \
    "${_index}" \
    "${_payload}"
}

_evm_call_opts_setup() {
  local \
    _msg=()
  _evm_contract_call_opts+=(
    -n
      "${_target_network}"
    -N
      "${_wallet_name}"
    -k
      "${_api_key_path}"
    -A
      "${_abi}"
    -B
      "${_bytecode}"
    -C
      "${_compiler_output}"
  )
  _msg=(
    "evm-contract-call will be called"
    "with base options '${_evm_contract_call_opts[*]}'"
  )
  _msg_info \
    "${_msg[*]}"
}

_list_call_opts_setup() {
  _evm_call_opts_setup
  _list_call_opts+=(
    "${_evm_contract_call_opts[@]}"
    -t
      "static"
  )
  _info_call_opts+=(
    "${_evm_contract_call_opts[@]}"
    -t
      "static"
  )
}

_work_dir_setup() {
  local \
    _msg=()
  _tmp_dir="${_cache_dir}"
  _msg=(
    "setting up work directory"
    "'${_tmp_dir}'"
  )
  _msg_info \
    "${_msg[*]}"
  mkdir \
    -p \
    "${_tmp_dir}/gnupg"
}

_chunks_publish() {
  local \
    _chunk \
    _index \
    _passed_flag \
    _payload \
    _msg=()
  _index=0
  for _chunk \
    in "${_queue[@]}"; do
    IFS= \
    read \
      -rd \
        '' \
      _payload < \
      <( cat \
           "${_chunk}") || \
      true
    _msg=(
      "checking chunk '${_chunk}'"
      "$(( "${_index}" + 1 ))"
      "of ${_total_chunks}"
    )
    _msg_info \
      "${_msg[*]}"
    _chunk_check_opts=(
      "${_fs_address}"
      "${_namespace}"
      "${_sum}"
      "${_index}"
      "${_chunk}"
    )
    _chunk_check \
      "${_chunk_check_opts[@]}"
    if [[ "${_passed_flag}" == "true" ]]; then
      _msg=(
        "chunk '${_chunk}' correctly published"
        "already at index '${_index}'"
      )
      _msg_info \
        "${_msg[*]}"
    elif [[ "${_passed_flag}" == "false" ]]; then
      _msg=(
        "publishing chunk '${_chunk}'"
        "$(( "${_index}" + 1 ))"
        "of ${_total_chunks}"
      )
      _msg_info \
        "${_msg[*]}"
      _chunk_publish_opts=(
        "${_fs_address}"
        "${_namespace}"
        "${_sum}"
        "${_index}"
        "${_payload}"
      )
      _chunk_publish \
        "${_chunk_publish_opts[@]}"
      _msg=(
        "published chunk"
        "$(( ${_index} + 1))"
        "of ${_total_chunks}"
      )
      _msg_info \
        "${_msg[*]}"
    fi
    _index="$(( \
      _index + 1))"
  done
  _msg=(
    "all '${_total_chunks}' chunks"
    "correctly published"
  )
  _msg_info \
    "${_msg[*]}"
}

_chunks_verify() {
  local \
    _index \
    _chunk \
    _msg=()
  _index=0
  for _chunk \
    in "${_queue[@]}"; do
    _msg=(
      "verifying chunk '${_chunk}'"
      "of ${_total_chunks}"
    )
    _msg_info \
      "${_msg[*]}"
    _chunk_verify_opts=(
      "${_fs_address}"
      "${_namespace}"
      "${_sum}"
      "${_index}"
      "${_chunk}"
    )
    _chunk_verify \
      "${_chunk_verify_opts[@]}"
    _msg=(
      "verified chunk '${_chunk}'"
      "$(( "${_index}" + 1 ))"
      "of ${_total_chunks}"
    )
    _msg_info \
      "${_msg[*]}"
    _index="$(( \
      _index + 1))"
  done
  _msg=(
    "all '${_total_chunks}' chunks"
    "correctly verified"
  )
  _msg_info \
    "${_msg[*]}"
}

_chunk_check() {
  local \
    _contract="${1}" \
    _namespace="${2}" \
    _sum="${3}" \
    _index="${4}" \
    _chunk="${5}" \
    _remote \
    _check_dir \
    _local_sum \
    _remote_sum \
    _msg=()
  _passed_flag="false"
  _check_dir="${_cache_dir}/${_sum}/check"
  _remote="${_check_dir}/${_index}"
  mkdir \
    -p \
    "${_check_dir}"
  evm-contract-call \
    "${_check_call_opts[@]}" \
    "${_fs_address}" \
    "chunks" \
    "${_namespace}" \
    "${_sum}" \
    "${_index}" > \
    "${_remote}"
  _local_sum="$( \
    _file_hash \
      "${_chunk}")"
  _remote_sum="$( \
    _file_hash \
      "${_remote}")"
  if [[ "${_local_sum}" == "${_remote_sum}" ]]; then
    _passed_flag="true"
  fi
}

_publishers_new_get() {
  local \
    _publisher
  for _publisher \
    in $(seq \
           "$((_publishers_local_total + \
               1))"
           "$((_publishers_remote_total} - \
               1))"); do
    printf \
      '%s\n' \
      "$(evm-contract-call \
           "${_list_call_opts[@]}" \
           "${_up_address}" \
           "publisher" \
           "${_publisher}")" >> \
      "${_publishers_file}"
  done
}

_publishers_list() {
  local \
    _target_network="${1}" \
    _up_address="${2}" \
    _abi="${3}" \
    _bytecode="${4}" \
    _compiler_output="${5}" \
    _msg=() \
    _queue=() \
    _publishers_remote_total \
    _publishers_local_total \
    _publishers_file \
    _tmp_dir \
    _evm_contract_call_opts=() \
    _list_call_opts=() \
    _info_call_opts=()
  _list_call_opts_setup
  _msg=(
    "listing publishers"
  )
  _msg_info \
    "${_msg[*]}"
  _work_dir_setup
  _publishers_file="${_work_dir}/publishers.txt"
  if [[ ! -e "${_publishers_file}" ]]; then
    touch \
      "${_publishers_file}"
  fi
  _publishers_remote_total="$(( \
    "$(evm-contract-call \
        "${_list_call_opts[@]}" \
        "${_up_address}" \
        "publisherNo")" - 1))"
  _msg=(
    "a total of '${_publishers_remote_total}'"
    "are listed on the repository."
  )
  _msg_info \
    "${_msg[*]}"
  _publishers_local_total="$( \
    wc \
      -l \
      "${_publishers_file}" | \
      awk \
        '{print $1}')" 
  _msg=(
    "locally are listed '${_publishers_local_total}'"
    "publishers."
  )
  _msg_info \
    "${_msg[*]}"
  _publishers_new="$(( \
   _publishers_remote_total - \
   _publishers_local_total))"
  if (( 0 < "${_publishers_new}" )); then
    _msg=(
      "getting info for new"
      "'${_publishers_new}' publishers"
    )
    _publishers_new_get
  fi
  # _queue_setup
  # _chunks_publish
  # _chunks_verify
  # _chunks_lock
  # _msg=(
  #   "file '${_file}' uploaded and"
  #   "available at URI"
  #   "'$(_publishing_address_get)'"
  # )
  # _msg_info \
  #   "${_msg[*]}"
}

_ur_publishers() {
  local \
    _up_address="${1}" \
    _up_version="${2}" \
    _deployments_dir="${3}" \
    _wallet_name="${4}" \
    _wallet_path="${5}" \
    _wallet_password="${6}" \
    _wallet_seed="${7}" \
    _target_network="${8}" \
    _api_key_path="${9}" \
    _cache_dir="${10}" \
    _gnupg_home="${10}" \
    _target_command="${11}" \
    _target_key="${12}" \
    _target_value="${13}" \
    _command_args=() \
    _cmd \
    _args=() \
    _namespace \
    _up_abi \
    _up_bytecode \
    _up_compiler_output
  shift \
    12
  _command_args+=(
    "$@"
  )
  _namespace="$( \
    evm-wallet \
     get \
       "${_wallet_name}" \
       "address")"
  _up_abi="$( \
    _contract_abi_get \
      "${_deployments_dir}" \
      "${_target_network}" \
      "UserRepositoryPublishers" \
      "${_up_version}")"
  _up_bytecode="$( \
    _contract_bytecode_get \
      "${_deployments_dir}" \
      "${_target_network}" \
      "UserRepositoryPublishers" \
      "${_up_version}")"
  _up_compiler_output="$( \
    _contract_compiler_output_get \
      "${_deployments_dir}" \
      "${_target_network}" \
      "UserRepositoryPublishers" \
      "${_up_version}")"
  if [[ "${_target_command}" == "list" ]]; then
    _publishers_list \
      "${_target_network}" \
      "${_up_address}" \
      "${_up_abi}" \
      "${_up_bytecode}" \
      "${_up_compiler_output}"
  else
    _msg_error \
      "unknown command '${_target_command}'"
  fi
}

_set_overrides() {
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  _set_override \
    "call" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "wallet" \
    "name" \
    "default"
  _set_override \
    "user" \
    "level" \
    "n"
  _deployments_dir_auto_detect \
    "ur" \
    "$(_get \
         "user" \
         "level")"
  _network_auto_detect \
    "UserRepositoryPublishers" \
    "$(_get \
         "deployments" \
         "dir")" \
    "$(_get \
         "user" \
         "level")"
  _api_key_auto_detect \
    "$(_get \
         "target" \
         "network")"
  _set_override \
    "wallet" \
    "path" \
    "$(_wallet_path_get \
         "evm-wallet" \
         "$(_get \
              "wallet" \
              "name")")"
  _secret_auto_detect \
    "seed" \
    "seed" \
    "evm-wallet" \
    "$(_get \
         "wallet" \
         "name")"
  _secret_auto_detect \
    "password" \
    "plain" \
    "evm-wallet" \
    "$(_get \
         "wallet" \
         "name")"
  _set_override \
    "wallet" \
    "address" \
    "$(evm-wallet \
         get \
           "$(_get \
                "wallet" \
                "name")" \
           "address")"
  _set_override \
    "cache" \
    "dir" \
    "$(_cache_dir_auto_detect)"
  _set_override \
    "gnupg" \
    "home" \
    "$(_get \
         "cache" \
         "dir")/gnupg"
  _contract_version_auto_detect \
    "$(_get \
         "deployments" \
         "dir")" \
    "UserRepositoryPublishers" \
    "up" \
    "$(_get \
         "target" \
         "network")"
  _contract_address_auto_detect \
    "ur" \
    "UserRepositoryPublishers" \
    "up" \
    "$(_get \
         "target" \
         "network")" \
    "$(_get \
         "up" \
         "version")" \
    "$(_get \
         "user" \
         "level")" \
    "$(_get \
         "deployments" \
         "dir")"
  _set_override \
    "target" \
    "command" \
    "list"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _up \
    _up_deployment \
    _networks \
    _usage_text
  _up="UserRepositoryPublishers"
  _up_deployment="$( \
    _get \
      "deployments" \
      "dir")/${_up}"
  _networks="$( \
    evm-contract-deployment-networks \
      -A \
      "${_up_deployment}")"
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true
Ur Publishers management

Usage:
  $(_get "app" "name")
    [options]
    <file>

  commands:
    list

  networks:
$(_display_networks \
     "${_networks[*]}")

  options:
     -A <up_address>        Address of the 'User Repository
                            Publishers' contract on the
                            network.
                            Default: $(_get "up" "address")
     -V <up_version>        Version of the target 'User Repository
                            Publishers' contract.
                            Default: $(_get "up" "version")
     -u                     Whether to retrieve publishers' contract
                            address from user directory or custom
                            deployment.
                            Default: $(_get "user" "level")
     -d <deployments_dir>   Contracts deployments directory.
                            Default: $(_get "deployments" "dir")
     -N <wallet_name>       Wallet name.
                            Default: $(_get "wallet" "name")
     -w <wallet_path>       Wallet path.
                            Default: $(_get "wallet" "path")
     -p <wallet_password>   Wallet password.
                            Default: $(_get "wallet" "password")
     -s <wallet_seed>       Wallet seed path.
                            Default: $(_get "wallet" "seed")
     -n <network>           EVM network name (${_networks[*]}).
                            Default: $(_get "target" "network")
     -k <api_key>           Etherscan-like service key.
                            Default: $(_get "api" "key")
     -C <cache_dir>         Work directory
                            Default: $(_get "cache" "dir")
     -H <gnupg_home>        GNUPG home directory
                            Default: $(_get "gnupg" "home")

     -h                     This message.
     -c                     Enable color output
     -v                     Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

_display_flags() {
  local \
    _flag \
    _flags=(
      "${1}"
    )
  for _flag \
    in "${_flags[@]}"; do
  _msg_info \
    "                             ${_flag}"
  done
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "                Call date:   $(_get "call" "date")"
  _msg_info "       Publishers address:   $(_get "up" "address")"
  _msg_info "       Publishers version:   $(_get "up" "version")"
  _msg_info "               User level:   $(_get "user" "level")"
  _msg_info "    Deployments directory:   $(_get "deployments" "dir")"
  _msg_info "                Namespace:   $(_get "wallet" "address")"
  _msg_info "              Wallet name:   $(_get "wallet" "name")"
  _msg_info "              Wallet path:   $(_get "wallet" "path")"
  _msg_info "          Wallet password:   $(_get "wallet" "password")"
  _msg_info "              Wallet seed:   $(_get "wallet" "seed")"
  _msg_info "           Target network:   $(_get "target" "network")"
  _msg_info "                  API key:   $(_get "api" "key")"
  _msg_info "          Cache directory:   $(_get "cache" "dir")"
  _msg_info "          GNUPG directory:   $(_get "gnupg" "home")"
  _msg_info "           Target command:   $(_get "target" "command")"
  _msg_info "               Target key:   $(_get "target" "key")"
  _msg_info "             Target value:   $(_get "target" "value")"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2034
while \
  getopts \
    'A:V:ud:N:w:p:s:n:k:m:C:H:cvh?' \
    arg; do
  case \
    "${arg}" in
    A) override_up_address="${OPTARG}" ;;
    V) override_up_version="${OPTARG}" ;;
    u) override_user_level="y" ;;
    d) override_deployments_dir="${OPTARG}" ;;
    N) override_wallet_name="${OPTARG}" ;;
    w) override_wallet_path="${OPTARG}" ;;
    p) override_wallet_password="${OPTARG}" ;;
    s) override_wallet_seed="${OPTARG}" ;;
    n) override_target_network="${OPTARG}" ;;
    k) override_api_key="${OPTARG}" ;;
    C) override_cache_dir="${OPTARG}" ;;
    H) override_gnupg_home="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
         _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
if (( $# < 1 )); then
  _msg_error \
    "no command given" \
    0
  _set_overrides
  _usage \
    1
fi
if (( 0 < $# )); then
  _set \
    "target" \
    "command" \
    "${1}"
fi
if (( 1 < $# )); then
  _set \
    "target" \
    "key" \
    "${2}"
fi
if (( 2 < $# )); then
  _set \
    "target" \
    "value" \
    "${3}"
fi
shift \
  3 || \
  true
command_args+=(
  "$@"
)
_set_overrides
_show_config
app_opts=(
  "$(_get \
       "up" \
       "address")"
  "$(_get \
       "up" \
       "version")"
  "$(_get \
       "deployments" \
       "dir")"
  "$(_get \
       "wallet" \
       "name")"
  "$(_get \
       "wallet" \
       "path")"
  "$(_get \
       "wallet" \
       "password")"
  "$(_get \
       "wallet" \
       "seed")"
  "$(_get \
       "target" \
       "network")"
  "$(_get \
       "api" \
       "key")"
  "$(_get \
       "cache" \
       "dir")"
  "$(_get \
       "gnupg" \
       "home")"
  "$(_get \
       "target" \
       "command")"
  "$(_get \
       "target" \
       "key")"
  "$(_get \
       "target" \
       "value")"
)
_ur_publishers \
  "${app_opts[@]}"

# vim:set sw=2 sts=-1 et:
