#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

# Check all required programs
# are available
_requirements() {
  _check_cmd \
    'lur'
  _check_cmd \
    'fur'
  _check_cmd \
    'inteppacman'
}

# shellcheck disable=SC2034
_global_variables() {
  packaging_date=()
  target_packages=()
  package_origin=""
  package_publisher=""
  target_revision=""
  work_dir=""
  color=""
  quiet=""
}

# $@: packages
_ur() {
  local \
    _package_origin="${1}" \
    _package_publisher="${2}" \
    _target_revision="${3}" \
    _work_dir="${4}" \
    _packages=() \
    _lur_opts=() \
    _inteppacman_opts=() \
    _pacman_opts=() \
    _cmd \
    _cmd_opts=() \
    _pkg
  shift \
    4
  _packages=(
    "$@"
  )
  if [[ "${quiet}" == "n" ]]; then
    _cmd_opts+=(
      -v
    )
    inteppacman_opts+=(
      -v
    )
  fi
  if [[ "${_package_origin}" == "ur" ]]; then
    _cmd="lur"
    _cmd_opts+=(
      -o
        "${_work_dir}"
    )
  elif [[ "${_package_origin}" == "fur" ]]; then
    _cmd="fur"
  fi
  for _pkg in "${_packages[@]}"; do
      "${_cmd}" \
        "${_cmd_opts[@]}" \
	"${_pkg}"
  done
  if [[ "${_package_origin}" == "lur" ]]; then
    inteppacman \
      "${_inteppacman_opts[@]}" -- \
      -U \
      "${_work_dir}/"*".pkg."
  fi
}

_work_dir_auto_detect() {
  local \
    _dir
  _dir=""
  if [[ "${work_dir}" == "" ]]; then
    _dir="${HOME}/.cache/ur"
    mkdir \
      -p \
      "${_dir}"
    chmod \
      700 \
      "${_dir}"
  fi
  _set_override \
    "work" \
    "dir" \
    "${_dir}"
}

# Set defaults and, if present, overrides
# from arch-grub command line option parameters
_set_overrides() {
if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  _set_override \
    "packaging" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "package" \
    "origin" \
    "ur"
  _set_override \
    "package" \
    "publisher" \
    ""
  _work_dir_auto_detect
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Uncensorable, distributed user repository and application store.

Usage:
  $(_get "app" "name")
    [options]
    [packages]
  options:
     -S <package_origin>     Package origin, it can be
                             'ur' and 'fur'.
                             Default: ${package_origin}
     -P <package_publisher>  Package publisher.
                             Default: ${package_publisher}
     -r <target_revision>    Package target revision.
                             Default: ${target_revision}
     -w <work_dir>           Work directory.
                             Default: ${target_revision}
     -c                      Colors.
     -h                      This message.
     -v                      Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "           Packaging date:   ${install_date}"
  _msg_info "           Package origin:   ${package_origin}"
  _msg_info "        Package publisher:   ${package_publisher}"
  _msg_info "          Target revision:   ${target_revision}"
  _msg_info "           Work directory:   ${work_dir}"
  _msg_info "                 Packages:   ${target_packages[*]}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'S:P:r:w:cvh?' \
    arg; do
  case \
    "${arg}" in
    S) override_package_origin="${OPTARG}" ;;
    P) override_package_publisher="${OPTARG}" ;;
    r) override_target_revision="${OPTARG}" ;;
    w) override_work_dir="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
(( $# < 1 )) && \
  _usage \
    1
target_packages=(
  $@
)
_config_user_init \
  "ur"
_set_overrides
_show_config
app_opts=(
  "${package_origin}"
  "${package_publisher}"
  "${target_revision}"
  "${work_dir}"
  "${target_packages[@]}"
)
_ur \
  "${app_opts[@]}"
