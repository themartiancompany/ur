#!/usr/bin/env bash
#
# SPDX-License-Identifier: AGPL-3.0

#    ----------------------------------------------------------------------
#    Copyright Â© 2023, 2024, 2025  Pellegrino Prevete
#
#    All rights reserved
#    ----------------------------------------------------------------------
#
#    This program is free software: you can redistribute it and/or modify
#    it under the terms of the GNU Affero General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    This program is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU Affero General Public License for more details.
#
#    You should have received a copy of the GNU Affero General Public License
#    along with this program.  If not, see <https://www.gnu.org/licenses/>.

_bin="$( \
  dirname \
    "$( \
      command \
        -v \
	  "env")")"
_lib="${_bin}/../lib"
_share="${_bin}/../share"
source \
  "${_lib}/libcrash-bash/crash-bash"

# Check all required programs
# are available
_requirements() {
  local \
    _os
  _os="$( \
    uname \
      -o)"
  _check_cmd \
    'lur'
  _check_cmd \
    'fur'
  _check_cmd \
    'inteppacman'
  if [[ "${_os}" == "GNU/Linux" ]]; then
    _check_cmd \
      "dbus"
  fi
  _check_cmd \
    "gio" \
    "glib2"
}

# shellcheck disable=SC2034
_global_variables() {
  install_date=()
  target_packages=()
  package_origin=""
  package_publisher=""
  target_revision=""
  work_dir=""
  package_run=""
  dependencies_check=""
  color=""
  quiet=""
}

_pkg_bin_select() {
  local \
    _pkg="${1}" \
    _bins=() \
    _bins_results=() \
    _usr \
    _bin \
    _pkg_installed_check \
    _pkg_not_installed_msg
  _usr="$( \
    _get_usr)"
  _pkg_installed_check="$( \
    pacman \
      -Qi \
      "${_pkg}" \
      2>&1)"
  _pkg_not_installed_msg=(
    "error: package '${_pkg}' was not found"
  )
  if [[ "${_pkg_installed_check}" == "${_pkg_not_installed_msg[*]}" ]]; then
    _msg_error \
      "${_pkg_not_installed_msg[*]}" \
      1
  fi
  readarray \
    -t \
    _bins_results <<<"$( \
      pacman \
        -Ql \
	  "${_pkg}" | \ 
        grep \
	  "${_usr}/bin/" || \
	true)"
  for _bin in "${_bins_results[@]}"; do
    _bins+=( "$( \
      basename \
        "${_bin#${_pkg} }")"
    )
  done
  if [[ 1 ==  "${#_bins}" ]]; then
    _cmd=(
      "${_bins[0]}"
    )
  elif (( 0 <  "${#_bins}" )); then
    for _bin in "${_bins[@]}"; do
      if [[ "${_bin}" == "${_pkg}" ]]; then
        _cmd=(
	  "${_pkg}"
        )
        break
      fi
    done
  fi
}

_pkg_applications_select() {
  local \
    _pkg="${1}" \
    _applications=() \
    _applications_results=() \
    _usr \
    _app \
    _app_name
  _usr="$( \
    _get_usr)"
  readarray \
    -t \
    _applications_results <<<"$( \
      pacman \
        -Ql \
	  "${_pkg}" | \ 
        grep \
	  "${_usr}/usr/share/applications/" || \
	true)"
  for _app in "${_applications_results[@]}"; do
    _applications+=(
      "${_app#${_pkg} }"
    )
  done
  if [[ 1 ==  "${#_applications}" ]]; then
    _cmd=(
      "dbus-launch"
        "gio"
	  "${_applications[0]}"
    )
  elif (( 0 <  "${#_applications}" )); then
    for _app in "${_applications[@]}"; do
      _app_name="$( \
        basename \
          "${_app}" | \
          tr \
            '[:upper:]' \
            '[:lower:]')"
      if [[ "${_app_name}" == "${_pkg}" ]]; then
        _cmd=(
          "dbus-launch"
            "gio"
              "${_app}"
        )
        break
      fi
    done
  fi
}

_pkg_run() {
  local \
    _pkg="${1}" \
    _cmd=() \
    _msg=()
  _pkg_bin_select \
    "${_pkg}"
  if [[ "${_cmd}" == "" ]]; then
    _pkg_applications_select \
      "${_pkg}"
  fi
  if [[ "${_cmd[*]}" == "" ]]; then
    _msg=(
      "No way to run the package found."
    )
    _msg_warning \
      "${_msg[*]}"
  elif [[ "${_cmd[*]}" != "" ]]; then
    "${_cmd[*]}"
  fi
}

_pkg_ur() {
  local \
    _pkg="${1}" \
    _revision \
    _pkg_dir \
    _cmd_opts=()
  if [[ "${_package_origin}" == "ur" ]]; then
    _pkg_dir="${_work_dir}/packages/${_pkg}"
    _revision="$( \
      echo \
        "${_pkg}" | \
        awk \
          -F \
            "=" \
          '{print $2}')"
    mkdir \
      -p \
      "${_pkg_dir}"
    if [[ "${_revision}" == "" ]]; then
      _revision="${_target_revision}"
    fi
    _cmd_opts=(
      "${_lur_opts[@]}"
      -o
        "${_pkg_dir}"
      -r
        "${_target_revision}"
    )
  fi
  "${_cmd}" \
    "${_cmd_opts[@]}" \
    "${_pkg}"
  if [[ "${_package_origin}" == "ur" ]]; then
    inteppacman \
      "${_inteppacman_opts[@]}" -- \
      "${_pacman_opts[@]}" \
      "${_pkg_dir}/"*".pkg."*
  fi
  if [[ "${_package_run}" == "y" ]]; then
    _pkg_run \
      "${_pkg}"
  fi
}

# $@: packages
_ur() {
  local \
    _package_origin="${1}" \
    _package_publisher="${2}" \
    _target_revision="${3}" \
    _work_dir="${4}" \
    _package_run="${5}" \
    _dependencies_check="${6}" \
    _packages=() \
    _lur_opts=() \
    _inteppacman_opts=() \
    _pacman_opts=() \
    _cmd \
    _cmd_opts=() \
    _pkg \
    _revision
  shift \
    6
  _packages=(
    "$@"
  )
  if [[ "${quiet}" == "n" ]]; then
    _cmd_opts+=(
      -v
    )
    _inteppacman_opts+=(
      -v
    )
    _lur_opts+=(
      -v
    )
    _pacman_opts+=(
      -v
    )
  fi
  if [[ "${_package_origin}" == "ur" ]]; then
    _cmd="lur"
    _lur_opts+=(
      -S
        "ur"
      -d
        "${_work_dir}/lur"
      -D
        "${_dependencies_check}"
    )
    _pacman_opts+=(
      --noconfirm
    )
    if [[ "${_dependencies_check}" == "y" ]]; then
      _pacman_opts+=(
        -U
      )
    elif [[ "${_dependencies_check}" == "n" ]]; then
      _pacman_opts+=(
        -Udd
	--overwrite="*"
      )
    fi
  elif [[ "${_package_origin}" == "fur" ]]; then
    _cmd="fur"
  fi
  for _pkg in "${_packages[@]}"; do
    _pkg_ur \
      "${_pkg}"
  done
}

_work_dir_auto_detect() {
  local \
    _dir
  _dir=""
  if [[ "${work_dir}" == "" ]]; then
    _dir="${HOME}/.cache/ur"
    mkdir \
      -p \
      "${_dir}"
    chmod \
      700 \
      "${_dir}"
  fi
  _set_override \
    "work" \
    "dir" \
    "${_dir}"
}

# Set defaults and, if present, overrides
# from arch-grub command line option parameters
_set_overrides() {
if [[ -v override_color ]]; then
    color="${override_color}"
  elif [[ -z "${color}" ]]; then
    color="n"
  fi
  if [[ -v override_quiet ]]; then
    quiet="${override_quiet}"
  elif [[ -z "${quiet}" ]]; then
    quiet="y"
  fi
  _set_override \
    "install" \
    "date" \
    "$(_get_date_human)"
  _set_override \
    "package" \
    "origin" \
    "ur"
  _set_override \
    "package" \
    "publisher" \
    ""
  _set_override \
    "target" \
    "revision" \
    "latest"
  _work_dir_auto_detect
  _set_override \
    "package" \
    "run" \
    "y"
  _set_override \
    "dependencies" \
    "check" \
    "y"
}

# Show help usage, with an exit status.
# $1: exit status number.
_usage() {
  local \
    _usage_text
  IFS='' \
    read \
      -r \
      -d '' \
      _usage_text << \
        ENDUSAGETEXT || true

Uncensorable, distributed user repository and application store.

Usage:
  $(_get "app" "name")
    [options]
    [packages]
  options:
     -S <package_origin>     Package origin, it can be
                             'ur' and 'fur'.
                             Default: ${package_origin}
     -P <package_publisher>  Package publisher.
                             Default: ${package_publisher}
     -r <target_revision>    Package target revision.
                             Default: ${target_revision}
     -w <work_dir>           Work directory.
                             Default: ${target_revision}
     -b <y/n>                Whether to run the program
                             after installed.
                             Default: ${package_run}
     -d <y/n>                Whether to skip dependencies
                             check when installing.
                             Default: ${dependencies_check}

     -c                      Colors.
     -h                      This message.
     -v                      Enable verbose output
ENDUSAGETEXT
  _printf \
    '%s\n' \
    "${_usage_text}"
  exit \
    "${1}"
}

# Shows configuration options.
_show_config() {
  _msg_info "${app_name} configuration"
  _msg_info "             Install date:   ${install_date}"
  _msg_info "           Package origin:   ${package_origin}"
  _msg_info "        Package publisher:   ${package_publisher}"
  _msg_info "          Target revision:   ${target_revision}"
  _msg_info "           Work directory:   ${work_dir}"
  _msg_info "       Dependencies check:   ${dependencies_check}"
  _msg_info "              Package run:   ${package_run}"
  _msg_info "                 Packages:   ${target_packages[*]}"
}

_globals
_global_variables
_requirements
# shellcheck disable=SC2004
# shellcheck disable=SC2034
while \
  getopts \
    'S:P:r:w:b:d:cvh?' \
    arg; do
  case \
    "${arg}" in
    S) override_package_origin="${OPTARG}" ;;
    P) override_package_publisher="${OPTARG}" ;;
    r) override_target_revision="${OPTARG}" ;;
    w) override_work_dir="${OPTARG}" ;;
    b) override_package_run="${OPTARG}" ;;
    d) override_dependencies_check="${OPTARG}" ;;
    c) override_color="y" ;;
    v) override_quiet="n" ;;
    h|?) _set_overrides && \
	 _usage \
           0 ;;
    *)
    _msg_error \
      "Invalid argument '${arg}'" \
      0 && \
    _set_overrides && \
    _usage \
      1
    ;;
  esac
done
shift \
  $(( \
    OPTIND - 1 \
  ))
(( $# < 1 )) && \
  _usage \
    1
target_packages=(
  $@
)
_config_user_init \
  "ur"
_set_overrides
_show_config
app_opts=(
  "${package_origin}"
  "${package_publisher}"
  "${target_revision}"
  "${work_dir}"
  "${package_run}"
  "${dependencies_check}"
  "${target_packages[@]}"
)
_ur \
  "${app_opts[@]}"
